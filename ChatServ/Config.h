

#ifndef __chatserv__Config__
#define __chatserv__Config__

/*
语法定义:
空白字符为 '\t \r\n'(制表符, 空格, 回车, 换行)
忽略只包含空白字符的行
有效行以 '\t*' 开头
注释行以 '\t*#' 开头
key 和 value 之间可以用等号'='或者冒号':'分隔
key 不包含任何空白字符, 两端的空白字符被忽略
value 两端的空白字符被忽略
配置项可以有包含关系, 用一个 TAB 缩进表示父子关系

配置读取:
用键名获取子配置项
用斜杠'/'或者句号'.'分隔的配置项路径获取配置项
把配置项的值作为整形(int)返回
把配置项的值作为字符串(char *)返回
*/

#include <string>
#include <vector>

#define CONFIG_MAX_LINE		4096

/* special filenames: stdin, stdout, stderr */
class Config{
private:
	Config *parent;
	int depth;

	Config(const std::string &key = "", const std::string &val = ""){
		this->parent = NULL;
		this->depth = 0;
		this->key = key;
		this->val = val;
	};

	Config* add(const char *key, const char *val, int lineno);
	const Config* find_child(const char *key) const;
public:
	~Config();
	static Config* load(const char *filename);
	int save(FILE *fp) const;
	int save(const char *filename) const;

	std::vector<Config *> children;
	std::string key;
	std::string val;

	const Config* get(const char *key) const;
	int num() const;
	int get_num(const char *key) const;
	const char* str() const;
	const char* get_str(const char *key) const;

	bool is_comment() const{
		return key[0] == '#';
	}
	std::string ToString() const{
		return key + ": " + val;
	}
};

#endif
/* defined(__chatserv__Config__) */
